// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DynamicTokenPricing {
    mapping(address => uint256) public balances;
    uint256 public totalSupply;
    uint256 public price = 1 ether; // Initial price

    event Bought(address indexed buyer, uint256 amount, uint256 price);
    event Sold(address indexed seller, uint256 amount, uint256 price);

    function buy() public payable {
        uint256 amount = msg.value / price;
        require(amount > 0, "Insufficient funds");
        
        balances[msg.sender] += amount;
        totalSupply += amount;
        adjustPhttps://remix.ethereum.org/#rice(true);

        emit Bought(msg.sender, amount, price);
    }

    function sell(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Not enough tokens");

        uint256 refund = amount * price;
        balances[msg.sender] -= amount;
        totalSupply -= amount;
        adjustPrice(false);

        payable(msg.sender).transfer(refund);
        emit Sold(msg.sender, amount, price);
    }

    function adjustPrice(bool increase) private {
        if (increase) {
            price += price / 10; // Increase by 10%
        } else {
            price -= price / 10; // Decrease by 10%
        }
    }
}
